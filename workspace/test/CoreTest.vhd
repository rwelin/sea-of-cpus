-- Template generated by mktest from ../src/Core.vhd
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.Core;
use work.core_config.all;
use work.test_utils.all;
use work.opcodes.all;
use work.utils.all;
use work.fir_filter.all;

entity CoreTest is
end entity CoreTest;

architecture behav of CoreTest is
    signal clk: std_logic;
    signal clk_en: std_logic;
    signal reset: std_logic;
    signal addr: ram_addr;
    signal data: word;
    signal fifo_inputs: core_fifo_inputs_t;
    signal fifo_full: std_logic_vector(core_fifo_inputs_t'range);
    signal we: std_logic;
    signal outputs: core_fifo_inputs_t;
    signal outputs_full: std_logic_vector(core_fifo_inputs_t'range);

    type TestData is
        record
            clk_en: std_logic;
            reset: std_logic;
            addr: ram_addr;
            data: word;
            we: std_logic;
            outputs_full: std_logic_vector(core_fifo_inputs_t'range);
            wait_cycles: integer;
        end record;

    type TestDataArray is array (0 to 2) of TestData;
    constant test_data: TestDataArray := (
        0 =>
            ('1', '1', (others => '0'), (others => '0'), '0', (others => '0'), 10),
        1 =>
            ('1', '0', (others => '0'), (others => '0'), '0', (others => '1'), 100),
        2 =>
            ('1', '0', (others => '0'), (others => '0'), '0', (others => '0'), 500)
    );

begin

    clk_gen: process
    begin
        clk <= '1';
        wait for 50 ns;
        clk <= '0';
        wait for 50 ns;
    end process clk_gen;

    Core_inst: entity Core
    port map (
        clk => clk,
        clk_en => clk_en,
        reset => reset,
        addr => addr,
        data => data,
        we => we,
        fifo_inputs => fifo_inputs,
        fifo_full => fifo_full,
        outputs => outputs,
        outputs_full => outputs_full
    );

    set_fifo_inputs: process(clk)
    begin

        for i in core_fifo_inputs_t'range loop
            fifo_inputs(i).wr_clk <= clk;
            fifo_inputs(i).din <= (others => '1');
            fifo_inputs(i).wr_en <= '1';
        end loop;

    end process set_fifo_inputs;

    Core_test: process
    begin
        wait_for(1, clk);

        clk_en <= '1';
        reset <= '1';
        we <= '1';

        wait_for(1, clk);

        reset <= '0';

        for i in fir_filter_code'range loop
            wait_for(1, clk);

            addr <= int2slv(i, ram_addr'length);
            report integer'image(i);
            data <= fir_filter_code(i);
            report "Loading data '" & to_string(fir_filter_code(i)) & "' to address " & integer'image(i);
        end loop;

        wait_for(1, clk);

        for i in test_data'range loop

            clk_en <= test_data(i).clk_en;
            reset <= test_data(i).reset;
            addr <= test_data(i).addr;
            data <= test_data(i).data;
            we <= test_data(i).we;
            outputs_full <= test_data(i).outputs_full;

            wait_for(test_data(i).wait_cycles, clk);

        end loop;

        report "DONE" severity failure;
    end process Core_test;

end architecture behav;

