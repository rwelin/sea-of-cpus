-- Template generated by mktest from ../src/dual_clk_fifo.vhd
library ieee;
use ieee.std_logic_1164.all;
use work.dual_clk_fifo;
use work.core_config.all;
use work.test_utils.all;

entity dual_clk_fifoTest is
end entity dual_clk_fifoTest;

architecture behav of dual_clk_fifoTest is
    signal rst: std_logic;
    signal clk: std_logic;
    signal din: std_logic_vector(17 downto 0);
    signal wr_en: std_logic;
    signal rd_en: std_logic;
    signal dout: std_logic_vector(17 downto 0);
    signal full: std_logic;
    signal empty: std_logic;

    type TestData is
        record
            rst: std_logic;
            din: std_logic_vector(17 downto 0);
            wr_en: std_logic;
            rd_en: std_logic;
            dout: std_logic_vector(17 downto 0);
            full: std_logic;
            empty: std_logic;
            wait_cycles: integer;
        end record;

    type TestDataArray is array (0 to 7) of TestData;
    constant test_data: TestDataArray := (
        0 => -- Reset test
            ('1', (others => '0'), '0', '0', (others => '0'), '1', '1', 10),
        1 => -- Idle test
            ('0', (others => '0'), '0', '0', (others => '0'), '0', '1', 4),
        2 => -- Write
            ('0', (others => '1'), '1', '0', (others => '0'), '0', '1', 1),
        3 => -- Wait for write to finish
            ('0', (others => '0'), '0', '0', (others => '0'), '0', '1', 5),
        4 => -- Read
            ('0', (others => '0'), '0', '1', (others => '0'), '0', '0', 1),
        5 => -- Wait for read to finish
            ('0', (others => '0'), '0', '0', (others => '1'), '0', '1', 1),
        6 => -- Fill fifo
            ('0', (others => '1'), '1', '0', (others => '1'), '0', '0', 15),
        7 => -- Check fifo is full
            ('0', (others => '0'), '0', '0', (others => '1'), '1', '0', 1)
           
    );

begin

    clk_gen: process
    begin
        clk <= '1';
        wait for 50 ns;
        clk <= '0';
        wait for 50 ns;
    end process clk_gen;

    dual_clk_fifo_inst: entity dual_clk_fifo
    port map (
        rst => rst,
        wr_clk => clk,
        rd_clk => clk,
        din => din,
        wr_en => wr_en,
        rd_en => rd_en,
        dout => dout,
        full => full,
        empty => empty
    );

    dual_clk_fifo_test: process
    begin
        wait until clk'event and clk = '1';

        for i in test_data'range loop

            rst <= test_data(i).rst;
            din <= test_data(i).din;
            wr_en <= test_data(i).wr_en;
            rd_en <= test_data(i).rd_en;

            wait_for(test_data(i).wait_cycles, clk);

            assert dout = test_data(i).dout
            report "Test " & integer'image(i) & ":" &
                " `dout' is " & to_string(dout) &
                " should be " & to_string(test_data(i).dout)
            severity failure;

            assert full = test_data(i).full
            report "Test " & integer'image(i) & ":" &
                " `full' is " & std_logic'image(full) &
                " should be " & std_logic'image(test_data(i).full)
            severity failure;

            assert empty = test_data(i).empty
            report "Test " & integer'image(i) & ":" &
                " `empty' is " & std_logic'image(empty) &
                " should be " & std_logic'image(test_data(i).empty)
            severity failure;

        end loop;

        report "DONE" severity failure;
    end process dual_clk_fifo_test;

end architecture behav;

