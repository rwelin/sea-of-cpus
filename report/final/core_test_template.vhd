-- Template generated by mktest from ../../src/Core.vhd
library ieee;
use ieee.std_logic_1164.all;
use work.core;
use work.core_config.all;
use work.test_utils.all;

entity coreTest is
end entity coreTest;

architecture behav of coreTest is
    signal clk: std_logic;
    signal clk_en: std_logic;
    signal reset: std_logic;
    signal addr: ram_addr;
    signal data: word;
    signal we: std_logic;
    signal fifo_inputs: core_fifo_inputs_t;
    signal fifo_full: std_logic_vector(0 to num_core_fifos-1);
    signal outputs: core_fifo_inputs_t;
    signal outputs_full: std_logic_vector(0 to num_core_fifos-1);

    type TestData is
        record
            clk_en: std_logic;
            reset: std_logic;
            addr: ram_addr;
            data: word;
            we: std_logic;
            fifo_inputs: core_fifo_inputs_t;
            fifo_full: std_logic_vector(0 to num_core_fifos-1);
            outputs: core_fifo_inputs_t;
            outputs_full: std_logic_vector(0 to num_core_fifos-1);
            wait_cycles: integer;
        end record;

    type TestDataArray is array (0 to 0) of TestData;
    constant test_data: TestDataArray := (
        -- Insert test data here
    );

begin

    clk_gen: process
    begin
        clk <= '1';
        wait for 50 ns;
        clk <= '0';
        wait for 50 ns;
    end process clk_gen;

    core_inst: entity core
    port map (
        clk => clk,
        clk_en => clk_en,
        reset => reset,
        addr => addr,
        data => data,
        we => we,
        fifo_inputs => fifo_inputs,
        fifo_full => fifo_full,
        outputs => outputs,
        outputs_full => outputs_full
    );

    core_test: process
    begin
        wait until clk'event and clk = '1';

        for i in test_data'range loop

            clk_en <= test_data(i).clk_en;
            reset <= test_data(i).reset;
            addr <= test_data(i).addr;
            data <= test_data(i).data;
            we <= test_data(i).we;
            fifo_inputs <= test_data(i).fifo_inputs;
            outputs_full <= test_data(i).outputs_full;

            wait_for(test_data(i).wait_cycles, clk);

            assert fifo_full = test_data(i).fifo_full
            report "Test " & integer'image(i) & ":" &
                " `fifo_full' is " & to_string(fifo_full) &
                " should be " & to_string(test_data(i).fifo_full)
            severity failure;

            assert outputs = test_data(i).outputs
            report "Test " & integer'image(i) & ":" &
                " `outputs' is " & to_string(outputs) &
                " should be " & to_string(test_data(i).outputs)
            severity failure;

        end loop;

        report "DONE" severity failure;
    end process core_test;

end architecture behav;

